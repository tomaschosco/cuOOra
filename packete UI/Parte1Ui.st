WAComponent subclass: #CrearPreguntasComponent	instanceVariableNames: 'titulo texto topicos pregunta topico'	classVariableNames: ''	package: 'Parte1Ui'!!CrearPreguntasComponent methodsFor: 'hook' stamp: 'tom 4/10/2020 03:59'!style	^ '		*{		font-family: Calibri;	}		.logo{		display: inline;		float: left;	}		.conectadocomo{		float:right;		font-size: 20px;	}		.nombre{		font-weight: bold;	}		.clearboth{		clear:both;	}		form input{		padding: 5px;		margin-left: 10px;	}		button{		border: 1px solid black;		background-color: white;		margin-left: 10px;	}	'.! !!CrearPreguntasComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:03'!renderLogout:aCanvasaCanvas section id: 'encabezado'; with:[	aCanvas heading class: 'logo';with: 'CuOOra'.aCanvas span class:'conectadocomo';with:[	aCanvas break .	aCanvas span class:'nombre';with:(self session user nombre),' '.	aCanvas anchor callback:[self session user: nil. self answer   ];with:'Log out'. 	]].aCanvas section class: 'clearboth'.aCanvas horizontalRule .! !!CrearPreguntasComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:04'!renderContentOn: canvas self renderLogout:canvas .canvas heading: 'Nueva Pregunta'.canvas horizontalRule .canvas form: [ 		canvas paragraph: [			canvas label:'Titulo'.			canvas textInput on: #titulo of: self;placeholder:'Escriba aqui el titulo de su pregunta'.		].			canvas paragraph: [			canvas label: 'Desarrollo'.			canvas textArea on: #texto of: self;placeholder: 'Escriba aqui el desarrollo de su pregunta.'.		].			canvas textInput on: #topicos of:self; placeholder: 'Ingrese topicos separados por coma.'.				canvas button callback:[ self cancelar ];with:'Cancelar'.				canvas button callback:[ self continuar ];with:'Guardar'.].! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:58'!topicos ^topicos! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:59'!topicos:anObject topicos:= anObject! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:57'!titulo: atitulotitulo :=atitulo ! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 04:06'!continuar	topicos := topicos splitOn: ','. "Tenemos una Collection de nombres  de topicos."	topicos := topicos collect: [ :ea | CuOOra soleInstance existeTopico: ea ]. "Le pedimos a CuOOra que nos d√© solo los que existen"		topicos := topicos select: [ :ea | ea notNil ]. "Los nil no los queremos"	CuOOra soleInstance agregarTituloPregunta: titulo descripcion: texto usuario: (self session user) topica: topicos.	self answer.	! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 04:05'!cancelar	titulo := nil.	texto := nil.	topicos := nil.	pregunta := nil.	self answer.! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:57'!texto ^texto ! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:56'!titulo ^titulo ! !!CrearPreguntasComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:57'!texto: atexto texto:=atexto ! !WAComponent subclass: #DetallesPreguntaComponent	instanceVariableNames: 'pregunta'	classVariableNames: ''	package: 'Parte1Ui'!!DetallesPreguntaComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:21'!renderCrearRespuesta: canvas	canvas		paragraph: [ canvas anchor				callback: [ self crearRespuesta ];				with: [ canvas button with: 'Agregar Respuesta' ] ]! !!DetallesPreguntaComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:32'!renderPregunta: aCanvas	aCanvas paragraph		with: [ aCanvas text: pregunta titulo ].	aCanvas paragraph		with: [ aCanvas				text: 'Topicos:';				space.			pregunta topicos do: [ :topi | aCanvas text: topi nombre ] ].	aCanvas paragraph		with: [ aCanvas text: 'Realizada por '.			aCanvas space.			aCanvas strong with: pregunta usuario nombre ].	aCanvas paragraph		with: [ aCanvas				text: pregunta likes size asString;				space;				text: 'Likes';				space;				text: '|';				space;				text: pregunta dislikes size asString;				space;				text: 'Dislikes' ].	aCanvas paragraph		with: [ aCanvas anchor				callback: [ CuOOra soleInstance darLikeA: pregunta usuario: (self session user) ];				with: 'like'.			aCanvas				space;				text: '|';				space.			aCanvas anchor				callback:						[ CuOOra soleInstance darDisLikeA: pregunta usuario: (self session user) ];				with: 'dislike' ].	aCanvas horizontalRule! !!DetallesPreguntaComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:19'!renderLogout:aCanvasaCanvas section id: 'encabezado'; with:[	aCanvas heading class: 'logo';with: 'CuOOra'.aCanvas span class:'conectadocomo';with:[	aCanvas break .	aCanvas span class:'nombre';with:(self session user nombre),' '.	aCanvas anchor callback:[self logOut  ];with:'Log out'. 	]].aCanvas section class: 'clearboth'.aCanvas horizontalRule .! !!DetallesPreguntaComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:34'!renderRespuestas: canvas	canvas		unorderedList: [ pregunta respuestas				do: [ :rta | 					canvas paragraph: [ 'Respuesta de ' , rta usuario nombre ].					canvas paragraph with: [ canvas text: rta texto ].					canvas paragraph						with: [ canvas								text: rta likes size asString;								text: ' likes | ';								text: rta dislikes size  asString;								text: ' dislikes' ].					canvas paragraph						with: [ canvas anchor								callback: [ CuOOra soleInstance darLikeA: rta usuario: self session user ];								with: 'Like'.							canvas text: ' | '.							canvas anchor								callback: [ CuOOra soleInstance darDisLikeA: rta usuario: self session user ];								with: 'Dislike' ].					canvas horizontalRule ] ].! !!DetallesPreguntaComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:15'!renderContentOn: canvas	"asumimos que el encabezado y la pregunta con like y dislikes ya esta , ponemos las respuestas de la misma"		self renderLogout: canvas .	self renderPregunta:canvas .	self renderRespuestas: canvas .	canvas paragraph: 'No hay mas respuestas'.	self renderCrearRespuesta: canvas .! !!DetallesPreguntaComponent methodsFor: 'hook' stamp: 'tom 4/10/2020 03:49'!style	^ '		*{		font-family: Calibri;	}		.logo{		display: inline;		float: left;	}		.conectadocomo{		float:right;		font-size: 20px;	}		.nombre{		font-weight: bold;	}		.clearboth{		clear:both;	}		.reaccionLike{		color: green;		font-weight: bold;		border: 1px solid green;	}		.reaccionDislike{		color: red;		font-weight: bold;		border: 1px solid red;	}	.preguntas{		color:black;		font-style:oblique;		}	'.! !!DetallesPreguntaComponent methodsFor: 'accessing' stamp: 'tom 4/8/2020 13:11'!pregunta^pregunta ! !!DetallesPreguntaComponent methodsFor: 'accessing' stamp: 'tom 4/8/2020 13:11'!pregunta: aObjectpregunta :=aObject ! !!DetallesPreguntaComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:18'!logOutself session user: nil.self answer ! !!DetallesPreguntaComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 03:23'!crearRespuestaself call: (ResponderPregComponent pregunta: pregunta ) .(self session user  )ifNil: [self answer ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DetallesPreguntaComponent class	instanceVariableNames: ''!!DetallesPreguntaComponent class methodsFor: 'accessing' stamp: 'tom 4/8/2020 13:12'!pregunta:aObjetc^self newpregunta: aObjetc ;yourself ! !WAComponent subclass: #InicioComponent	instanceVariableNames: 'cuoora'	classVariableNames: ''	package: 'Parte1Ui'!!InicioComponent methodsFor: 'hook' stamp: 'tom 4/8/2020 15:40'!style	^ '		*{		font-family: Calibri;	}		.logo{		display: inline;		float: left;	}		.conectadocomo{		float:right;		font-size: 20px;	}		.nombre{		font-weight: bold;	}		.clearboth{		clear:both;	}		.reaccionLike{		color: green;		font-weight: bold;		border: 1px solid green;	}		.reaccionDislike{		color: red;		font-weight: bold;		border: 1px solid red;	}	.preguntas{		color:black;		font-style:oblique;		}	'.! !!InicioComponent methodsFor: 'accesing' stamp: 'tom 4/7/2020 16:16'!cuoora^ CuOOra soleInstance .! !!InicioComponent methodsFor: 'rendering' stamp: 'tom 4/8/2020 15:36'!renderLogout:aCanvasaCanvas section id: 'encabezado'; with:[	aCanvas heading class: 'logo';with: 'CuOOra'.aCanvas span class:'conectadocomo';with:[	aCanvas break .	aCanvas span class:'nombre';with:(self session user nombre),' '.	aCanvas anchor callback:[self answer ];with:'Log out'. 	]].aCanvas section class: 'clearboth'.aCanvas horizontalRule .! !!InicioComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 11:19'!initialize super initialize ! !!InicioComponent methodsFor: 'rendering' stamp: 'tom 4/8/2020 15:44'!renderPreguntasFrecuentes:aCanvasaCanvas heading: 'Ultimas Preguntas'.		aCanvas		unorderedList: [ (CuOOra soleInstance				obternerPreguntasRelevantesDe: self session user)				do: [ :preg | 					aCanvas anchor class: 'preguntas';						callback: [ self verPregunta:preg  ];						with: preg titulo.					aCanvas paragraph with: [aCanvas text:'Topicos:';space. preg topicos do:[:topi|aCanvas text:topi nombre  ]].						aCanvas paragraph						with: [aCanvas text: 'Realizada por '.							aCanvas space.							aCanvas strong with: preg usuario nombre.							aCanvas space.							aCanvas text: '|'.							aCanvas space.							aCanvas text: preg respuestas size asString , ' respuestas' ].					aCanvas paragraph						with: [ aCanvas								text: preg likes size asString;								space;								text: 'Likes';								space;								text: '|';								space;								text: preg dislikes size asString;								space;								text: 'Dislikes' ].					aCanvas						paragraph with:  [ aCanvas anchor								callback: [ CuOOra soleInstance  darLikeA: preg usuario: self session user ];								with: 'like'.							aCanvas								space;								text: '|';								space.							aCanvas anchor								callback: [ CuOOra soleInstance darDisLikeA: preg usuario: self session user ];								with: 'dislike' ] .													aCanvas horizontalRule .].						 ]! !!InicioComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:10'!renderContentOn: aCanvas	self renderLogout: aCanvas.		aCanvas paragraph: [ aCanvas anchor				callback: [ self crearPregunta ];				with: 'Crear nueva pregunta' ].	self renderPreguntasFrecuentes: aCanvas	"aCanvas heading: 'Ultimas Preguntas'.		aCanvas		unorderedList: [ (CuOOra soleInstance				obternerPreguntasRelevantesDe: self session user)				do: [ :preg | 					aCanvas anchor class: 'preguntas';						callback: [ self verPregunta:preg  ];						with: preg titulo.					aCanvas paragraph with: [aCanvas text:'Topicos:';space. preg topicos do:[:topi|aCanvas text:topi nombre  ]].						aCanvas paragraph						with: [aCanvas text: 'Realizada por '.							aCanvas space.							aCanvas strong with: preg usuario nombre.							aCanvas space.							aCanvas text: '|'.							aCanvas space.							aCanvas text: preg respuestas size asString , ' respuestas' ].					aCanvas paragraph						with: [ aCanvas								text: preg likes size asString;								space;								text: 'Likes';								space;								text: '|';								space;								text: preg dislikes size asString;								space;								text: 'Dislikes' ].					aCanvas						paragraph with:  [ aCanvas anchor								callback: [ CuOOra soleInstance  darLikeA: preg usuario: self session user ];								with: 'like'.							aCanvas								space;								text: '|';								space.							aCanvas anchor								callback: [ CuOOra soleInstance darDisLikeA: preg usuario: self session user ];								with: 'dislike' ] ] ]"! !!InicioComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:40'!verPregunta:preg	self call: (DetallesPreguntaComponent pregunta: preg ).	self session user ifNil: [ self answer  ]! !!InicioComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:11'!crearPregunta	self call: CrearPreguntaComponent new.	self session user ifNil: [ self answer  ]! !WAComponent subclass: #PerfilUserComponent	instanceVariableNames: 'usuario'	classVariableNames: ''	package: 'Parte1Ui'!!PerfilUserComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 04:47'!usuario: auserusuario :=auser ! !!PerfilUserComponent methodsFor: 'accessing' stamp: 'tom 4/10/2020 05:05'!verPregunta:preg self call: (DetallesPreguntaComponent pregunta: preg ).	self session user ifNil: [ self answer  ]! !!PerfilUserComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:49'!renderLogout:aCanvasaCanvas section id: 'encabezado'; with:[	aCanvas heading class: 'logo';with: 'CuOOra'.aCanvas span class:'conectadocomo';with:[	aCanvas break .	aCanvas span class:'nombre';with:(self session user nombre),' '.	aCanvas anchor callback:[self session user: nil. self answer   ];with:'Log out'. 	]].aCanvas section class: 'clearboth'.aCanvas horizontalRule .! !!PerfilUserComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 05:09'!renderContentOn: canvas	self renderLogout: canvas.	canvas paragraph		with: [ canvas strong with: 'Preguntas de ' , usuario nombre.			canvas space.			canvas anchor				callback:						[ CuOOra soleInstance unUsuario: self session user sigueA: usuario ];				with: 'follow' ].			canvas break .			self renderPreguntas:canvas.! !!PerfilUserComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 05:08'!renderPreguntas:canvascanvas unorderedList: [ (CuOOra soleInstance todasLasPreguntasDe: usuario )					do: [ :preg |					canvas anchor class: 'preguntas';						callback: [ self verPregunta:preg  ];						with: preg titulo.					canvas paragraph with: [canvas text:'Topicos:';space. preg topicos do:[:topi|canvas text:topi nombre  ]].						canvas paragraph						with: [canvas text: 'Realizada por '.							canvas space.							canvas strong with: preg usuario nombre.							canvas space.							canvas text: '|'.							canvas space.							canvas text: preg respuestas size asString , ' respuestas' ].					canvas paragraph						with: [ canvas								text: preg likes size asString;								space;								text: 'Likes';								space;								text: '|';								space;								text: preg dislikes size asString;								space;								text: 'Dislikes' ].					canvas						paragraph with:  [ canvas anchor								callback: [ CuOOra soleInstance  darLikeA: preg usuario: self session user ];								with: 'like'.							canvas								space;								text: '|';								space.							canvas anchor								callback: [ CuOOra soleInstance darDisLikeA: preg usuario: self session user ];								with: 'dislike' ] .													 canvas horizontalRule .]]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PerfilUserComponent class	instanceVariableNames: ''!!PerfilUserComponent class methodsFor: 'accessing' stamp: 'tom 4/10/2020 04:47'!usuario:auser^self new usuario: auser ;yourself ! !WAComponent subclass: #ResponderPregComponent	instanceVariableNames: 'pregunta texto'	classVariableNames: ''	package: 'Parte1Ui'!!ResponderPregComponent methodsFor: 'hook' stamp: 'tom 4/10/2020 03:49'!style	^ '		*{		font-family: Calibri;	}		.logo{		display: inline;		float: left;	}		.conectadocomo{		float:right;		font-size: 20px;	}		.nombre{		font-weight: bold;	}		.clearboth{		clear:both;	}		.reaccionLike{		color: green;		font-weight: bold;		border: 1px solid green;	}		.reaccionDislike{		color: red;		font-weight: bold;		border: 1px solid red;	}	.preguntas{		color:black;		font-style:oblique;		}	'.! !!ResponderPregComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:38'!renderLogout:aCanvasaCanvas section id: 'encabezado'; with:[	aCanvas heading class: 'logo';with: 'CuOOra'.aCanvas span class:'conectadocomo';with:[	aCanvas break .	aCanvas span class:'nombre';with:(self session user nombre),' '.	aCanvas anchor callback:[ self session user: nil. self answer  ];with:'Log out'. 	]].aCanvas section class: 'clearboth'.aCanvas horizontalRule .! !!ResponderPregComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:49'!renderPregunta: aCanvas	aCanvas paragraph		with: [ aCanvas text: pregunta titulo  ].	aCanvas paragraph		with: [ aCanvas				text: 'Topicos:';				space.			pregunta topicos do: [ :topi | aCanvas text: topi nombre ] ].	aCanvas paragraph		with: [ aCanvas text: 'Realizada por '.			aCanvas space.			aCanvas strong with: pregunta usuario nombre ].	aCanvas paragraph		with: [ aCanvas				text: pregunta likes size asString;				space;				text: 'Likes';				space;				text: '|';				space;				text: pregunta dislikes size asString;				space;				text: 'Dislikes' ].	aCanvas paragraph		with: [ aCanvas anchor				callback: [ CuOOra soleInstance darLikeA: pregunta usuario: (self session user) ];				with: 'like'.			aCanvas				space;				text: '|';				space.			aCanvas anchor				callback:						[ CuOOra soleInstance darDisLikeA: pregunta usuario: (self session user) ];				with: 'dislike' ].	aCanvas horizontalRule! !!ResponderPregComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 03:37'!renderContentOn: canvas self renderLogout: canvas .self renderPregunta: canvas .canvas form:[canvas paragraph: [			canvas label: 'RESPONDER '.			canvas textArea on: #texto of: self;placeholder: 'Escriba aqui el texto de su respuesta.'.		].canvas button callback:[ self cancelar ];with:'Cancelar'.		canvas button callback:[ self guardar ];with:'Guardar'.	]! !!ResponderPregComponent methodsFor: 'accessing' stamp: 'tom 4/8/2020 19:36'!pregunta:aobjetpregunta :=aobjet ! !!ResponderPregComponent methodsFor: 'accessing' stamp: 'tom 4/8/2020 19:42'!texto ^texto! !!ResponderPregComponent methodsFor: 'accessing' stamp: 'tom 4/8/2020 19:42'!texto:atextotexto:=atexto ! !!ResponderPregComponent methodsFor: 'callbacks' stamp: 'tom 4/8/2020 19:51'!cancelartexto :=nil.self answer ! !!ResponderPregComponent methodsFor: 'callbacks' stamp: 'tom 4/8/2020 19:51'!guardar CuOOra soleInstance agregarTextoRespuesta: texto  aLaPregunta: pregunta   usuario: self session user .self answer ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ResponderPregComponent class	instanceVariableNames: ''!!ResponderPregComponent class methodsFor: 'accessing' stamp: 'tom 4/8/2020 19:35'!pregunta: apregunta^self new pregunta: apregunta! !WAComponent subclass: #UiLoginComponent	instanceVariableNames: 'usuario contrasena'	classVariableNames: ''	package: 'Parte1Ui'!!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 10:28'!usuario: aUserusuario :=aUser! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 11:14'!modelo^CuOOra soleInstance! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 10:27'!usuario^usuario ! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 10:59'!proceder:aUserself session user:aUser.self call: InicioComponent new ! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 10:28'!contrasena:aContracontrasena :=aContra! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 10:27'!contrasena^contrasena ! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/7/2020 10:41'!renderContentOn: aCanvasaCanvas form: [aCanvas paragraph: [ aCanvas label: 'Usuario:  '.aCanvas textInput on:#usuario of:self].aCanvas paragraph:  [aCanvas label: 'Contra√±a: '.aCanvas textInput on:#contrasena of:self].aCanvas submitButton callback: [ self iniciarSesion ];with: 'Iniciar Sesion' ]! !!UiLoginComponent methodsFor: 'rendering' stamp: 'tom 4/10/2020 04:14'!iniciarSesion(self modelo existeUsuario:usuario con:contrasena)ifNotNil: [ :it| self proceder:it] .usuario :=nil.contrasena :=nil.! !!UiLoginComponent methodsFor: 'initialization' stamp: 'tom 4/7/2020 10:24'!initialize super initialize.! !