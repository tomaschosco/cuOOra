TestCase subclass: #AnswerTest	instanceVariableNames: 'answer'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!AnswerTest methodsFor: 'testing'!testPositiveVotes	answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.	! !!AnswerTest methodsFor: 'testing'!testNegativeVotes			answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 1.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 2.! !!AnswerTest methodsFor: 'testing'!testVotesForNewAnswer	self assert: (answer negativeVotes size) equals: 0.	self assert: (answer positiveVotes size) equals: 0.		! !!AnswerTest methodsFor: 'testing'!testPositiveAndNegativeVotesInterference		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 0.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 2.		self assert: answer votes size equals: 4.! !!AnswerTest methodsFor: 'setup'!setUp	answer := Answer new:'An answer'  user:(User new)  question:(Question new).! !TestCase subclass: #QuestionRetrieverTest	instanceVariableNames: 'cuoora user1 user2 user3 topicOO1 topicOO2 questionUser1TopicOO1 questionUser3TopicOO2 questionUser2TopicOO2 question2User3TopicOO2'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionRetrieverTest methodsFor: 'set up' stamp: 'Anonymous 5/12/2020 18:12'!setUp	user1 := User new.	user2 := User new.	user3 := User new.	user1 follow: user2; follow: user3.		topicOO1 := Topic name: 'OO1' description: 'This topic is for discussing about OO1 issues'.	topicOO2 := Topic name: 'OO2' description: 'This topic is for discussing about OO2 issues'.		user1 addTopic: topicOO1.	user2 addTopic: topicOO2.	user3 addTopic: topicOO2.	cuoora := CuOOra new.	cuoora addUser: user1; addUser: user2; addUser: user3.		questionUser1TopicOO1 := Question newWithTitle: 'How to create a class in Pharo' description: '' user: user1 topic: topicOO1.	questionUser3TopicOO2 := Question newWithTitle: 'How to create a WAComponent for...' description: '' user: user3 topic: topicOO2.	cuoora addQuestion: questionUser1TopicOO1 forUser:user1.	cuoora addQuestion: questionUser3TopicOO2 forUser:user3.	! !QuestionRetrieverTest subclass: #NewsRetrieverTest	instanceVariableNames: 'newsRetriever'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!NewsRetrieverTest methodsFor: 'tests' stamp: 'Anonymous 5/12/2020 18:07'!testRetrieveQuestions	self assert: (newsRetriever retrieveQuestions: user1) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user1) last equals: questionUser3TopicOO2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user3) last equals: questionUser1TopicOO1.		questionUser2TopicOO2 := Question		newWithTitle: 'Which bad smell...?'		description: ''		user: user2		topic: topicOO2.	cuoora addQuestion: questionUser2TopicOO2 forUser: user2.		self assert: (newsRetriever retrieveQuestions: user1) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 2.! !!NewsRetrieverTest methodsFor: 'set up' stamp: 'Anonymous 5/12/2020 18:08'!setUp 		super setUp.	newsRetriever := NewsRetriever new:cuoora.! !QuestionRetrieverTest subclass: #PopularRetrieverTest	instanceVariableNames: 'popularTodayRetriever'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!PopularRetrieverTest methodsFor: 'tests' stamp: 'Anonymous 5/12/2020 18:43'!testRetrieveQuestions	self     noLikesTwoQuestions;     noLikesThreeQuestions;     atLeastOneVote;     fourQuestionsAtLeastOneVote;     twoLikesFourQuestionsAtLeastOneVote;     fourLikesFourQuestionsAtLeastOneVote;     fiveLikesFourQuestionsAtLeastOneVote! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:38'!fiveLikesFourQuestionsAtLeastOneVote  "5 likes / 4 preguntas // preguntas con mas de 1 voto"question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user1) first equals: question2User3TopicOO2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 0.  15 timesRepeat: [ questionUser1TopicOO1 addVote: (Vote user: User new likesPublication: questionUser1TopicOO1) ].  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) first equals: questionUser1TopicOO1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) first equals: questionUser1TopicOO1! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:38'!fourLikesFourQuestionsAtLeastOneVote	  "4 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user1 likesPublication: question2User3TopicOO2).  question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:35'!atLeastOneVote   "1 likes / 2 preguntas // preguntas con al menos 1 voto"  questionUser2TopicOO2 addVote: (Vote user: user3 likesPublication: questionUser2TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:40'!fourQuestionsAtLeastOneVote	  "1 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 := Question newWithTitle: 'Which refactoring should...' description: '' user: user3 topic: topicOO2.  cuoora addQuestion: question2User3TopicOO2 forUser: user3.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:42'!noLikesThreeQuestions  "0 likes / 3 preguntas "  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 2! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:43'!noLikesTwoQuestions	self		assert: (popularTodayRetriever retrieveQuestions: user1) size		equals: 1.	"0 likes / 2 preguntas "	self		assert: (popularTodayRetriever retrieveQuestions: user1) last		equals: questionUser3TopicOO2.	self		assert: (popularTodayRetriever retrieveQuestions: user2) size		equals: 2.	self		assert: (popularTodayRetriever retrieveQuestions: user3) size		equals: 1.	self		assert: (popularTodayRetriever retrieveQuestions: user3) last		equals: questionUser1TopicOO1! !!PopularRetrieverTest methodsFor: 'testing' stamp: 'Anonymous 5/12/2020 18:43'!twoLikesFourQuestionsAtLeastOneVote	   "2 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user2 likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!PopularRetrieverTest methodsFor: 'set up' stamp: 'Anonymous 5/12/2020 18:24'!setUp 		super setUp.	popularTodayRetriever := PopularRetriever new: cuoora.! !TestCase subclass: #QuestionTest	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionTest methodsFor: 'setup'!setUp	question := Question  newWithTitle: 'Question  title' description: 'Question description' user: (User new) ! !!QuestionTest methodsFor: 'testing'!testPositiveVotes	question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 2.	! !!QuestionTest methodsFor: 'testing'!testNegativeVotes			question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 2.! !!QuestionTest methodsFor: 'testing'!testPositiveAndNegativeVotesInterference		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question positiveVotes size) equals: 0.	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.	self assert: (question negativeVotes size) equals: 1.		self assert: question votes size equals: 2.! !!QuestionTest methodsFor: 'testing'!testVotesForNewQuestion	self assert: (question negativeVotes size) equals: 0.	self assert: (question positiveVotes size) equals: 0.		! !QuestionRetrieverTest subclass: #SocialRetrieverTest	instanceVariableNames: 'socialRetriever'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!SocialRetrieverTest methodsFor: 'tests' stamp: 'Anonymous 5/12/2020 18:00'!testRetrieveQuestions	self assert: (socialRetriever retrieveQuestions: user1) size equals: 1.	self assert: (socialRetriever retrieveQuestions: user1) first equals: questionUser3TopicOO2.		self assert: (socialRetriever retrieveQuestions: user2) size equals: 0.	self assert: (socialRetriever retrieveQuestions: user3) size equals: 0.		questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.	questionUser2TopicOO2 addVote: (Vote user: user2 dislikesPublication: questionUser2TopicOO2).	cuoora addQuestion: questionUser2TopicOO2 forUser:user2.		self assert: (socialRetriever retrieveQuestions: user1) size equals: 2.	self assert: (socialRetriever retrieveQuestions: user1) last equals: questionUser2TopicOO2.		self assert: (socialRetriever retrieveQuestions: user3) size equals: 0.	self assert: (socialRetriever retrieveQuestions: user2) size equals: 0.! !!SocialRetrieverTest methodsFor: 'set up' stamp: 'Anonymous 5/12/2020 18:00'!setUp	super setUp.	socialRetriever := SocialRetriever new: cuoora.! !QuestionRetrieverTest subclass: #TopicsRetrieverTest	instanceVariableNames: 'topicsRetriever'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!TopicsRetrieverTest methodsFor: 'tests' stamp: 'Anonymous 5/12/2020 18:05'!testRetrieveQuestions   self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 0.  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) first equals: questionUser2TopicOO2.  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0! !!TopicsRetrieverTest methodsFor: 'set up' stamp: 'Anonymous 5/12/2020 18:05'!setUp 	super setUp.	topicsRetriever := TopicsRetriever new: cuoora.! !