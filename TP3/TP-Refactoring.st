Object subclass: #CuOOra	instanceVariableNames: 'users topics questions'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!CuOOra methodsFor: 'initialize'!initialize	users := OrderedCollection new.	topics := OrderedCollection new.	questions := OrderedCollection new! !!CuOOra methodsFor: 'adding'!addQuestion: aQuestion forUser: aUser	aUser addQuestion: aQuestion.	questions add: aQuestion.! !!CuOOra methodsFor: 'adding'!addQuestion: aQuestion	questions add: aQuestion! !!CuOOra methodsFor: 'adding'!addUser: aUser	users add: aUser ! !!CuOOra methodsFor: 'adding'!addTopic: aTopic	topics add: aTopic ! !!CuOOra methodsFor: 'accessing'!users	^ users! !!CuOOra methodsFor: 'accessing'!questions	^ questions! !!CuOOra methodsFor: 'accessing'!topics	^ topics! !Object subclass: #Post	instanceVariableNames: 'timestamp user votes description'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Post methodsFor: 'accessing' stamp: 'Anonymous 5/12/2020 00:01'!description	^ description! !!Post methodsFor: 'accessing' stamp: 'Anonymous 5/12/2020 00:01'!votes	^ votes! !!Post methodsFor: 'accessing' stamp: 'Anonymous 5/12/2020 00:01'!timestamp	^ timestamp! !!Post methodsFor: 'accessing' stamp: 'Anonymous 5/12/2020 00:01'!user	^ user! !!Post methodsFor: 'private' stamp: 'Anonymous 5/12/2020 00:01'!user: anObject	user := anObject! !!Post methodsFor: 'private' stamp: 'Anonymous 5/12/2020 00:01'!description: anObject	description := anObject! !!Post methodsFor: 'private' stamp: 'Anonymous 5/12/2020 00:01'!timestamp: anObject	timestamp := anObject! !!Post methodsFor: 'adding' stamp: 'Anonymous 5/12/2020 00:01'!addVote: aVote	votes add: aVote! !!Post methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/12/2020 00:07'!negativeVotes	^ votes select: [:vote | vote isLike=false ].! !!Post methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/12/2020 00:07'!positiveVotes	^ votes select: [:vote | vote isLike ].! !!Post methodsFor: 'initialization' stamp: 'Anonymous 5/12/2020 00:00'!initialize 	votes := OrderedCollection new.	timestamp := DateAndTime now.! !Post subclass: #Answer	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Answer methodsFor: 'initialize' stamp: 'Anonymous 5/12/2020 00:12'!initialize	super initialize.! !!Answer methodsFor: 'private'!question: aQuestion	question := aQuestion ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Answer class	instanceVariableNames: ''!!Answer class methodsFor: 'instance creation'!new: anAnswer user: aUser question: aQuestion	^ self new		description: anAnswer;		user: aUser;		question: aQuestion;		yourself! !Post subclass: #Question	instanceVariableNames: 'title answers topics'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Question methodsFor: 'adding'!addTopic: aTopic	topics add: aTopic.	aTopic addQuestion: self.! !!Question methodsFor: 'accessing'!title	^title ! !!Question methodsFor: 'accessing'!topics	^topics ! !!Question methodsFor: 'accessing'!title: aTitle	title := aTitle ! !!Question methodsFor: 'initalize-release' stamp: 'Anonymous 5/12/2020 00:12'!initialize	super initialize.	answers := OrderedCollection new.	topics := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Question class	instanceVariableNames: ''!!Question class methodsFor: 'instance creation'!newWithTitle: title description: aDescription user: aUser	^ self new		title: title;		description: aDescription;		user: aUser;		yourself.! !!Question class methodsFor: 'instance creation'!newWithTitle: title description: aDescription user: aUser topic: aTopic	^ self new		title: title;		description: aDescription;		addTopic: aTopic;		user: aUser;		yourself.! !Object subclass: #QuestionRetriever	instanceVariableNames: 'option cuoora'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!QuestionRetriever methodsFor: 'accesing'!option: anOption	option := anOption! !!QuestionRetriever methodsFor: 'accesing'!cuoora: aCuooraInstance	cuoora := aCuooraInstance ! !!QuestionRetriever methodsFor: 'retrieving' stamp: 'Anonymous 5/8/2020 00:14'!sortByPositives: aCollection	^ aCollection		asSortedCollection: [ :q1 :q2 | q1 positiveVotes size > q2 positiveVotes size ]! !!QuestionRetriever methodsFor: 'retrieving' stamp: 'Anonymous 5/8/2020 00:10'!retrieveQuestions: aUser	self subclassResponsibility.! !!QuestionRetriever methodsFor: 'initializing'!initialize	option := #social! !!QuestionRetriever methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/8/2020 00:17'!getLast100:aCollection	^ aCollection last: (100 min: aCollection size).! !!QuestionRetriever methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/8/2020 00:23'!getFromToday:aCollection	^ aCollection select:[:ea | ea timestamp asDate = Date today].! !!QuestionRetriever methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/8/2020 00:39'!reject:aUser from:aCollection	^ aCollection reject: [ :ea | ea user = aUser ].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!QuestionRetriever class	instanceVariableNames: ''!!QuestionRetriever class methodsFor: 'instance creation' stamp: 'Anonymous 5/8/2020 00:32'!new: cuoora	^ self new cuoora: cuoora;yourself.! !QuestionRetriever subclass: #NewsRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!NewsRetriever methodsFor: 'retrieving' stamp: 'Anonymous 5/11/2020 23:56'!retrieveQuestions:aUser	| result |	result := self getFromToday: cuoora questions.	result := self sortByPositives: result.	result := self getLast100: result.	result := (self reject:aUser from:result).	^ result.! !QuestionRetriever subclass: #PopularRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!PopularRetriever methodsFor: 'retrieving' stamp: 'Anonymous 5/11/2020 23:50'!retrieveQuestions:aUser	| averageVotes |	averageVotes := (cuoora questions sum: [:q | q positiveVotes size ]) / (self getFromToday: cuoora questions) size.	^ self reject:aUser from: (self getLast100:( self sortByPositives: (self get: (cuoora questions) aboveAverage: averageVotes) ) ).! !!PopularRetriever methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/11/2020 23:50'!get:aCollection aboveAverage:average	^ aCollection select: [:q | q positiveVotes size >= average ].! !QuestionRetriever subclass: #SocialRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!SocialRetriever methodsFor: 'retrieving' stamp: 'Anonymous 5/11/2020 23:48'!retrieveQuestions: aUser	| followingQuestions |	followingQuestions := aUser following flatCollect:[:ea|ea questions].	^ self reject:aUser from: (self getLast100:(self sortByPositives: followingQuestions) ).! !Object subclass: #Topic	instanceVariableNames: 'name description questions'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Topic methodsFor: 'initialize'!initialize	questions := OrderedCollection new.! !!Topic methodsFor: 'accessing'!description	^ description! !!Topic methodsFor: 'accessing'!questions	^ questions! !!Topic methodsFor: 'accessing'!name	^name! !!Topic methodsFor: 'accessing'!name: anObject	name := anObject! !!Topic methodsFor: 'accessing'!description: anObject	description := anObject! !!Topic methodsFor: 'accessing'!addQuestion: aQuetion	questions add: aQuetion ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Topic class	instanceVariableNames: ''!!Topic class methodsFor: 'intance creation'!name: aName description: aDescription	^ self new		name: aName;		description: aDescription;		yourself! !QuestionRetriever subclass: #TopicsRetriever	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-Refactoring-Model'!!TopicsRetriever methodsFor: 'retrieving' stamp: 'Anonymous 5/11/2020 23:48'!retrieveQuestions:aUser	| topicQuestions |	topicQuestions := aUser topics flatCollect: [ :t | t questions ].	^ self reject: aUser from: (self getLast100:(self sortByPositives: topicQuestions) ).! !Object subclass: #User	instanceVariableNames: 'questionRetriever questions answers username password topics following votes'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!User methodsFor: 'accessing'!questionsOfInterest	^ questionRetriever retrieveQuestions: self.! !!User methodsFor: 'accessing'!follow: aUser	following add: aUser ! !!User methodsFor: 'accessing'!votes	^ votes! !!User methodsFor: 'accessing'!addTopic: aTopic	topics add: aTopic ! !!User methodsFor: 'accessing'!questionRetriever	^ questionRetriever! !!User methodsFor: 'accessing'!questions	^ questions! !!User methodsFor: 'accessing'!topics	^ topics! !!User methodsFor: 'accessing'!addAnswer: anAnswer	answers add: anAnswer ! !!User methodsFor: 'accessing'!addQuestion: aQuestion	questions add: aQuestion! !!User methodsFor: 'accessing'!username	^ username! !!User methodsFor: 'accessing'!answers	^ answers! !!User methodsFor: 'accessing'!following	^ following! !!User methodsFor: 'accessing'!addVote: aVote	votes add: aVote! !!User methodsFor: 'accessing'!password	^ password! !!User methodsFor: 'initialize'!initialize	questions := OrderedCollection new.  	answers := OrderedCollection new. 	topics := OrderedCollection new. 	following := OrderedCollection new. 	votes := OrderedCollection new.! !!User methodsFor: 'private'!password: anObject	password := anObject! !!User methodsFor: 'private'!username: anObject	username := anObject! !!User methodsFor: 'private'!questionRetriever: aQuestionRetriever	questionRetriever := aQuestionRetriever.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!User class	instanceVariableNames: ''!!User class methodsFor: 'instance-creation'!username: aUsername password: aPassword questionRetriever: aQuestionRetriever	^ self new		username: aUsername;		password: aPassword;		questionRetriever: aQuestionRetriever;		yourself! !Object subclass: #Vote	instanceVariableNames: 'isLike timstamp publication user'	classVariableNames: ''	package: 'TP-Refactoring-Model'!!Vote methodsFor: 'initialize'!initialize	isLike := true.	timstamp := DateAndTime now.	! !!Vote methodsFor: 'private'!user: anObject	user := anObject! !!Vote methodsFor: 'private'!dislike	isLike := false.! !!Vote methodsFor: 'private'!publication: anObject	publication := anObject! !!Vote methodsFor: 'private'!like	isLike := true.! !!Vote methodsFor: 'accessing'!user	^ user! !!Vote methodsFor: 'accessing'!publication	^ publication! !!Vote methodsFor: 'accessing'!isLike	^ isLike! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vote class	instanceVariableNames: ''!!Vote class methodsFor: 'instance creation'!user: aUser likesPublication: aPublication	^ self new		user: aUser;		publication: aPublication;		yourself! !!Vote class methodsFor: 'instance creation'!user: aUser dislikesPublication: aPublication	^ self new		user: aUser;		publication: aPublication;		dislike;		yourself! !TestCase subclass: #AnswerTest	instanceVariableNames: 'answer'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!AnswerTest methodsFor: 'testing'!testPositiveVotes	answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.	! !!AnswerTest methodsFor: 'testing'!testNegativeVotes			answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 1.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer negativeVotes size) equals: 2.! !!AnswerTest methodsFor: 'testing'!testVotesForNewAnswer	self assert: (answer negativeVotes size) equals: 0.	self assert: (answer positiveVotes size) equals: 0.		! !!AnswerTest methodsFor: 'testing'!testPositiveAndNegativeVotesInterference		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 0.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 1.		answer addVote: (Vote user: (User new) likesPublication: answer).		self assert: (answer positiveVotes size) equals: 2.		answer addVote: (Vote user: (User new) dislikesPublication: answer).	self assert: (answer positiveVotes size) equals: 2.		self assert: answer votes size equals: 4.! !!AnswerTest methodsFor: 'setup'!setUp	answer := Answer new:'An answer'  user:(User new)  question:(Question new).! !TestCase subclass: #QuestionRetrieverTest	instanceVariableNames: 'cuoora socialRetriever topicsRetriever newsRetriever popularTodayRetriever user1 user2 user3 topicOO1 topicOO2 questionUser1TopicOO1 questionUser3TopicOO2 questionUser2TopicOO2 question2User3TopicOO2'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionRetrieverTest methodsFor: 'set up' stamp: 'Anonymous 5/11/2020 23:42'!setUp	user1 := User new.	user2 := User new.	user3 := User new.	user1 follow: user2; follow: user3.		topicOO1 := Topic name: 'OO1' description: 'This topic is for discussing about OO1 issues'.	topicOO2 := Topic name: 'OO2' description: 'This topic is for discussing about OO2 issues'.		user1 addTopic: topicOO1.	user2 addTopic: topicOO2.	user3 addTopic: topicOO2.	cuoora := CuOOra new.	cuoora addUser: user1; addUser: user2; addUser: user3.		questionUser1TopicOO1 := Question newWithTitle: 'How to create a class in Pharo' description: '' user: user1 topic: topicOO1.	questionUser3TopicOO2 := Question newWithTitle: 'How to create a WAComponent for...' description: '' user: user3 topic: topicOO2.	cuoora addQuestion: questionUser1TopicOO1 forUser:user1.	cuoora addQuestion: questionUser3TopicOO2 forUser:user3.		socialRetriever := SocialRetriever new: cuoora.	topicsRetriever := TopicsRetriever new: cuoora.	newsRetriever := NewsRetriever new: cuoora.	popularTodayRetriever := PopularRetriever new: cuoora.! !!QuestionRetrieverTest methodsFor: 'testing'!testPopularTodayRetrieveQuestions  self     popularTodayNoLikesTwoQuestions;     popularTodayNoLikesThreeQuestions;     popularTodayAtLeastOneVote;     popularTodayFourQuestionsAtLeastOneVote;     popularTodayTwoLikesFourQuestionsAtLeastOneVote;     popularTodayFourLikesFourQuestionsAtLeastOneVote;     popularTodayFiveLikesFourQuestionsAtLeastOneVote! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayTwoLikesFourQuestionsAtLeastOneVote	   "2 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user2 likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayFourQuestionsAtLeastOneVote	  "1 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 := Question newWithTitle: 'Which refactoring should...' description: '' user: user3 topic: topicOO2.  cuoora addQuestion: question2User3TopicOO2 forUser: user3.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!testTopicsRetrieveQuestions  | questionUser2TopicOO2 |  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 0.  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (topicsRetriever retrieveQuestions: user2) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) size equals: 1.  self assert: (topicsRetriever retrieveQuestions: user3) first equals: questionUser2TopicOO2.  self assert: (topicsRetriever retrieveQuestions: user1) size equals: 0! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayFourLikesFourQuestionsAtLeastOneVote	  "4 likes / 4 preguntas // preguntas con al menos 1 voto"question2User3TopicOO2 addVote: (Vote user: user1 likesPublication: question2User3TopicOO2).  question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayNoLikesThreeQuestions  "0 likes / 3 preguntas "  questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.  cuoora addQuestion: questionUser2TopicOO2 forUser: user2.  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 2.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 2! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayNoLikesTwoQuestions	self		assert: (popularTodayRetriever retrieveQuestions: user1) size		equals: 1.	"0 likes / 2 preguntas "	self		assert: (popularTodayRetriever retrieveQuestions: user1) last		equals: questionUser3TopicOO2.	self		assert: (popularTodayRetriever retrieveQuestions: user2) size		equals: 2.	self		assert: (popularTodayRetriever retrieveQuestions: user3) size		equals: 1.	self		assert: (popularTodayRetriever retrieveQuestions: user3) last		equals: questionUser1TopicOO1! !!QuestionRetrieverTest methodsFor: 'testing'!testSocialRetrieveQuestions	| questionUser2TopicOO2 |		self assert: (socialRetriever retrieveQuestions: user1) size equals: 1.	self assert: (socialRetriever retrieveQuestions: user1) first equals: questionUser3TopicOO2.		self assert: (socialRetriever retrieveQuestions: user2) size equals: 0.	self assert: (socialRetriever retrieveQuestions: user3) size equals: 0.		questionUser2TopicOO2 := Question newWithTitle: 'Which bad smell...?' description: '' user: user2 topic: topicOO2.	questionUser2TopicOO2 addVote: (Vote user: user2 dislikesPublication: questionUser2TopicOO2).	cuoora addQuestion: questionUser2TopicOO2 forUser:user2.		self assert: (socialRetriever retrieveQuestions: user1) size equals: 2.	self assert: (socialRetriever retrieveQuestions: user1) last equals: questionUser2TopicOO2.		self assert: (socialRetriever retrieveQuestions: user3) size equals: 0.	self assert: (socialRetriever retrieveQuestions: user2) size equals: 0.				! !!QuestionRetrieverTest methodsFor: 'testing'!testNewsRetrieveQuestions	| questionUser2TopicOO2 |	self assert: (newsRetriever retrieveQuestions: user1) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user1) last equals: questionUser3TopicOO2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 1.	self assert: (newsRetriever retrieveQuestions: user3) last equals: questionUser1TopicOO1.		questionUser2TopicOO2 := Question		newWithTitle: 'Which bad smell...?'		description: ''		user: user2		topic: topicOO2.	cuoora addQuestion: questionUser2TopicOO2 forUser: user2.		self assert: (newsRetriever retrieveQuestions: user1) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user2) size equals: 2.	self assert: (newsRetriever retrieveQuestions: user3) size equals: 2.! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayAtLeastOneVote   "1 likes / 2 preguntas // preguntas con al menos 1 voto"  questionUser2TopicOO2 addVote: (Vote user: user3 likesPublication: questionUser2TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1! !!QuestionRetrieverTest methodsFor: 'testing'!popularTodayFiveLikesFourQuestionsAtLeastOneVote  "5 likes / 4 preguntas // preguntas con mas de 1 voto"question2User3TopicOO2 addVote: (Vote user: User new likesPublication: question2User3TopicOO2).  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user1) first equals: question2User3TopicOO2.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 0.  15 timesRepeat: [ questionUser1TopicOO1 addVote: (Vote user: User new likesPublication: questionUser1TopicOO1) ].  self assert: (popularTodayRetriever retrieveQuestions: user1) size equals: 0.  self assert: (popularTodayRetriever retrieveQuestions: user2) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user2) first equals: questionUser1TopicOO1.  self assert: (popularTodayRetriever retrieveQuestions: user3) size equals: 1.  self assert: (popularTodayRetriever retrieveQuestions: user3) first equals: questionUser1TopicOO1! !TestCase subclass: #QuestionTest	instanceVariableNames: 'question'	classVariableNames: ''	package: 'TP-Refactoring-Tests'!!QuestionTest methodsFor: 'setup'!setUp	question := Question  newWithTitle: 'Question  title' description: 'Question description' user: (User new) ! !!QuestionTest methodsFor: 'testing'!testPositiveVotes	question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 2.	! !!QuestionTest methodsFor: 'testing'!testNegativeVotes			question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question negativeVotes size) equals: 2.! !!QuestionTest methodsFor: 'testing'!testPositiveAndNegativeVotesInterference		question addVote: (Vote user: (User new) dislikesPublication: question).	self assert: (question positiveVotes size) equals: 0.	self assert: (question negativeVotes size) equals: 1.		question addVote: (Vote user: (User new) likesPublication: question).		self assert: (question positiveVotes size) equals: 1.	self assert: (question negativeVotes size) equals: 1.		self assert: question votes size equals: 2.! !!QuestionTest methodsFor: 'testing'!testVotesForNewQuestion	self assert: (question negativeVotes size) equals: 0.	self assert: (question positiveVotes size) equals: 0.		! !